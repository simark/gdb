# Copyright 2015 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test running a program that spawns enough threads that the tid
# number space wraps around, all while having an exited selected
# thread.  At some point, the exited thread's tid is reused.  GDB
# should not crash when this happens.

standard_testfile

set options { "additional_flags=-DTIMEOUT=$timeout" debug pthreads }

if {[prepare_for_testing "failed to prepare" $testfile $srcfile { debug pthreads }] == -1} {
    return -1
}

clean_restart ${binfile}

if ![runto main] {
    fail "Can't run to main"
    return -1
}

delete_breakpoints

# Avoid dumping a ton of thread create/exit info in the logs.
gdb_test_no_output "set print thread-events off"

gdb_breakpoint "after_count"
gdb_continue_to_breakpoint "after_count"

# Get value of VARIABLE in the inferior.

proc getvar {variable} {
    global decimal
    global gdb_prompt

    set value 0

    set msg "get $variable"
    gdb_test_multiple "print $variable" $msg {
	-re " = ($decimal)\r\n$gdb_prompt $" {
	    set value $expect_out(1,string)
	    pass $msg
	}
    }
    return $value
}

set inf_timeout [getvar "wrap_time"]

# Now the real test.  Run to a breakpoint in a thread that exits
# immediately once resumed.  The thread ends up left on the thread
# list, marked exited (exactly because it's the selected thread).
gdb_breakpoint "do_nothing_thread_func"
gdb_continue_to_breakpoint "do_nothing_thread_func"

delete_breakpoints

# Let the program continue, constantly spawning short-lived threads.
# On some targets, after a bit, a new thread reuses the tid of the old
# exited thread that we still have selected.  GDB should not crash in
# this situation.
gdb_breakpoint "after_wrap"

# Higher than what the test program sleeps before exiting.
set timeout [expr $inf_timeout * 2]

gdb_continue_to_breakpoint "after_wrap"
